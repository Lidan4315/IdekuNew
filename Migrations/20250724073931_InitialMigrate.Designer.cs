// <auto-generated />
using System;
using Ideku.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ideku.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250724073931_InitialMigrate")]
    partial class InitialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ideku.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NamaCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nama_category");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Departement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("DivisiId")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("divisi_id");

                    b.Property<string>("NamaDepartement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nama_departement");

                    b.HasKey("Id");

                    b.HasIndex("DivisiId");

                    b.ToTable("departement");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Divisi", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<string>("NamaDivisi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nama_divisi");

                    b.HasKey("Id");

                    b.ToTable("divisi");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DepartementId")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("departement_id");

                    b.Property<string>("DivisiId")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("divisi_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Emp_Status")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LdapUser")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Position_Lvl")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DepartementId");

                    b.HasIndex("DivisiId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NamaEvent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nama_event");

                    b.HasKey("Id");

                    b.ToTable("event");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Idea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentFile")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cAttachment_file");

                    b.Property<string>("AttachmentMonitoring")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attachmentMonitoring");

                    b.Property<string>("CatReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("catReason");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int?>("CurrentStage")
                        .HasColumnType("int")
                        .HasColumnName("nCurrent_stage");

                    b.Property<string>("CurrentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cCurrent_status");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cDepartment");

                    b.Property<string>("Division")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cDivision");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<bool?>("FlagFinance")
                        .HasColumnType("bit")
                        .HasColumnName("flagFinance");

                    b.Property<string>("FlagFlow")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cFlagFlow");

                    b.Property<bool?>("FlagStatus")
                        .HasColumnType("bit")
                        .HasColumnName("flag_status");

                    b.Property<string>("IdeaIssueBackground")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cIdea_issue_background");

                    b.Property<string>("IdeaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cIdea_name");

                    b.Property<string>("IdeaSolution")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cIdea_solution");

                    b.Property<string>("IdeaType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cIdeaType");

                    b.Property<string>("ImsCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cImsCode");

                    b.Property<string>("Initiator")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("cInitiator");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payload");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rejectReason");

                    b.Property<decimal?>("SavingCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("nSaving_cost");

                    b.Property<string>("SavingCostOption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cSavingCostOption");

                    b.Property<string>("SavingCostOptionValidated")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cSavingCostOptionValidated");

                    b.Property<decimal?>("SavingCostValidated")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("nSavingCostValidated");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dSubmitted_date");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("dUpdated_date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId");

                    b.ToTable("ideas");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("Ideku.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employee_id");

                    b.Property<string>("FlagActing")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Departement", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Divisi", "Divisi")
                        .WithMany("Departements")
                        .HasForeignKey("DivisiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Divisi");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Employee", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Departement", "Departement")
                        .WithMany("Employees")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ideku.Models.Entities.Divisi", "Divisi")
                        .WithMany("Employees")
                        .HasForeignKey("DivisiId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Departement");

                    b.Navigation("Divisi");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Idea", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ideku.Models.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Ideku.Models.Entities.User", b =>
                {
                    b.HasOne("Ideku.Models.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ideku.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Departement", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Ideku.Models.Entities.Divisi", b =>
                {
                    b.Navigation("Departements");

                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
